From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Spliterash <me@spliterash.ru>
Date: Sat, 28 Jan 2023 16:39:32 +0300
Subject: [PATCH] Allow disable world save


diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/RegionFile.java b/src/main/java/net/minecraft/world/level/chunk/storage/RegionFile.java
index 59e1dc3a0095fb140aaf4b3756d2c0b8554f3ff9..74783fa234d8383ccb135187bf4aca248382bee6 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/RegionFile.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/RegionFile.java
@@ -12,6 +12,7 @@ import net.minecraft.nbt.CompoundTag;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.chunk.ChunkStatus;
 import org.slf4j.Logger;
+import ru.minetopia.server.MinetopiaConfig;
 
 import javax.annotation.Nullable;
 import java.io.*;
@@ -153,7 +154,8 @@ public class RegionFile {
     }
 
     void flush() throws IOException {
-
+        if (!MinetopiaConfig.worldSave)
+            return;
         Lock lock = GLOBAL_FLUSH_LOCK.computeIfAbsent(regionFile, (ignore) -> new ReentrantLock());
         lock.lock();
         try {
@@ -227,6 +229,8 @@ public class RegionFile {
     }
 
     public synchronized void write(ChunkPos pos, ByteBuffer buffer) {
+        if (!MinetopiaConfig.worldSave)
+            return;
         LZ4Compressor compressor = LZ4Factory.fastestInstance().fastCompressor();
         try {
             byte[] b = toByteArray(new ByteArrayInputStream(buffer.array()));
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/RegionFileChecker.java b/src/main/java/net/minecraft/world/level/chunk/storage/RegionFileChecker.java
index 018fbda24a570c66b1d5b615f5cd0b3affde4024..de1d34da94727945b42bf8c997624042a91dc506 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/RegionFileChecker.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/RegionFileChecker.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.level.chunk.storage;
 
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
+import ru.minetopia.server.MinetopiaConfig;
 
 import java.util.Collection;
 import java.util.HashSet;
@@ -11,16 +12,20 @@ import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantLock;
 
 public class RegionFileChecker {
-    static final ScheduledExecutorService linearSaveExecutor = Executors.newScheduledThreadPool(10, new ThreadFactoryBuilder()
-        .setNameFormat("Linear parallel flusher - %1$d")
-        .setUncaughtExceptionHandler((t, e) -> e.printStackTrace())
-        .build());
+    static ScheduledExecutorService linearSaveExecutor;
 
     public static Set<RegionFile> activeFiles = new HashSet<>();
     private static Lock setLock = new ReentrantLock();
 
     static {
-        linearSaveExecutor.scheduleWithFixedDelay(RegionFileChecker::check, 0, 10, TimeUnit.SECONDS);
+        if (MinetopiaConfig.worldSave) {
+
+            linearSaveExecutor = Executors.newScheduledThreadPool(10, new ThreadFactoryBuilder()
+                .setNameFormat("Linear parallel flusher - %1$d")
+                .setUncaughtExceptionHandler((t, e) -> e.printStackTrace())
+                .build());
+            linearSaveExecutor.scheduleWithFixedDelay(RegionFileChecker::check, 0, 10, TimeUnit.SECONDS);
+        }
     }
 
     private static void check() {
@@ -28,12 +33,18 @@ public class RegionFileChecker {
     }
 
     public static void addRegionFile(RegionFile file) {
+        if (!MinetopiaConfig.worldSave)
+            return;
+
         setLock.lock();
         activeFiles.add(file);
         setLock.unlock();
     }
 
     public static void fileClosed(RegionFile file) {
+        if (!MinetopiaConfig.worldSave)
+            return;
+
         setLock.lock();
         activeFiles.remove(file);
         setLock.unlock();
@@ -43,6 +54,9 @@ public class RegionFileChecker {
     }
 
     public static void flushAll(Collection<RegionFile> collection) {
+        if (!MinetopiaConfig.worldSave)
+            return;
+
         setLock.lock();
         List<Callable<Void>> callables;
         try {
diff --git a/src/main/java/ru/minetopia/server/MinetopiaConfig.java b/src/main/java/ru/minetopia/server/MinetopiaConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..e626d568eaa347cbfae14b91cb3981f7b17c8450
--- /dev/null
+++ b/src/main/java/ru/minetopia/server/MinetopiaConfig.java
@@ -0,0 +1,139 @@
+package ru.minetopia.server;
+
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.MemoryConfiguration;
+import org.jetbrains.annotations.Nullable;
+import org.simpleyaml.configuration.comments.CommentType;
+import org.simpleyaml.configuration.file.YamlFile;
+import org.simpleyaml.exceptions.InvalidConfigurationException;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.List;
+
+public class MinetopiaConfig {
+
+    private static final YamlFile config = new YamlFile();
+    private static int updates = 0;
+
+    private static ConfigurationSection convertToBukkit(org.simpleyaml.configuration.ConfigurationSection section) {
+        ConfigurationSection newSection = new MemoryConfiguration();
+        for (String key : section.getKeys(false)) {
+            if (section.isConfigurationSection(key)) {
+                newSection.set(key, convertToBukkit(section.getConfigurationSection(key)));
+            } else {
+                newSection.set(key, section.get(key));
+            }
+        }
+        return newSection;
+    }
+
+    public static ConfigurationSection getConfigCopy() {
+        return convertToBukkit(config);
+    }
+
+    public static int getUpdates() {
+        return updates;
+    }
+
+    public static void load() throws IOException {
+        File configFile = new File("minetopia.yml");
+
+        if (configFile.exists()) {
+            try {
+                config.load(configFile);
+            } catch (InvalidConfigurationException e) {
+                throw new IOException(e);
+            }
+        }
+
+        getString("info.version", "1.0");
+        setComment("info",
+            "Minetopia Configuration"
+        );
+        for (Method method : MinetopiaConfig.class.getDeclaredMethods()) {
+            if (Modifier.isStatic(method.getModifiers()) && Modifier.isPrivate(method.getModifiers()) && method.getParameterCount() == 0 &&
+                method.getReturnType() == Void.TYPE && !method.getName().startsWith("lambda")) {
+                method.setAccessible(true);
+                try {
+                    method.invoke(null);
+                } catch (Throwable t) {
+                    MinecraftServer.LOGGER.warn("Failed to load configuration option from " + method.getName(), t);
+                }
+            }
+        }
+
+        updates++;
+
+        config.save(configFile);
+    }
+
+    private static void setComment(String key, String... comment) {
+        if (config.contains(key)) {
+            config.setComment(key, String.join("\n", comment), CommentType.BLOCK);
+        }
+    }
+
+    private static void ensureDefault(String key, Object defaultValue, String... comment) {
+        if (!config.contains(key)) {
+            config.set(key, defaultValue);
+            config.setComment(key, String.join("\n", comment), CommentType.BLOCK);
+        }
+    }
+
+    private static boolean getBoolean(String key, boolean defaultValue, String... comment) {
+        return getBoolean(key, null, defaultValue, comment);
+    }
+
+    private static boolean getBoolean(String key, @Nullable String oldKey, boolean defaultValue, String... comment) {
+        ensureDefault(key, defaultValue, comment);
+        return config.getBoolean(key, defaultValue);
+    }
+
+    private static int getInt(String key, int defaultValue, String... comment) {
+        return getInt(key, null, defaultValue, comment);
+    }
+
+    private static int getInt(String key, @Nullable String oldKey, int defaultValue, String... comment) {
+        ensureDefault(key, defaultValue, comment);
+        return config.getInt(key, defaultValue);
+    }
+
+    private static double getDouble(String key, double defaultValue, String... comment) {
+        return getDouble(key, null, defaultValue, comment);
+    }
+
+    private static double getDouble(String key, @Nullable String oldKey, double defaultValue, String... comment) {
+        ensureDefault(key, defaultValue, comment);
+        return config.getDouble(key, defaultValue);
+    }
+
+    private static String getString(String key, String defaultValue, String... comment) {
+        return getOldString(key, null, defaultValue, comment);
+    }
+
+    private static String getOldString(String key, @Nullable String oldKey, String defaultValue, String... comment) {
+        ensureDefault(key, defaultValue, comment);
+        return config.getString(key, defaultValue);
+    }
+
+    private static List<String> getStringList(String key, List<String> defaultValue, String... comment) {
+        return getStringList(key, null, defaultValue, comment);
+    }
+
+    private static List<String> getStringList(String key, @Nullable String oldKey, List<String> defaultValue, String... comment) {
+        ensureDefault(key, defaultValue, comment);
+        return config.getStringList(key);
+    }
+
+    public static boolean worldSave;
+
+    private static void worldSave() {
+        worldSave = getBoolean("world-save", true,
+            "Full disable any world save on disk"
+        );
+    }
+}
